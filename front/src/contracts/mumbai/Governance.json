{
  "address": "0xE7FfE20725328eE1fD3E761466D10C126432ef7d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "widContractAddress",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "sbtContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sessionId",
          "type": "uint256"
        }
      ],
      "name": "ProposalSessionRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sessionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "vote",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voices",
          "type": "uint256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sessionId",
          "type": "uint256"
        }
      ],
      "name": "VotingSessionReinitialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_desc",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endDate",
          "type": "uint256"
        }
      ],
      "name": "addProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sessionId",
          "type": "uint256"
        }
      ],
      "name": "getOneProposalSession",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "description",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "voteCountYes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "voteCountNo",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Governance.Proposal",
              "name": "proposal",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct Governance.ProposalVotingSession",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStackingContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "votingSessionId",
          "type": "uint256"
        }
      ],
      "name": "getVoterStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVotingPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_votingSessionId",
          "type": "uint256"
        }
      ],
      "name": "getVotingSessionStatus",
      "outputs": [
        {
          "internalType": "enum Governance.VotingSessionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stackWID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "unstackWID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sessionId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_vote",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_votingPower",
          "type": "uint256"
        }
      ],
      "name": "voteOnProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x62286c744472fadd52c51e6d5d730466f0eefe8a3b239bf4525472397c61b894",
  "receipt": {
    "to": null,
    "from": "0xE5BAC846Fa14dacF121599f3757AB36a2C8F699D",
    "contractAddress": "0xE7FfE20725328eE1fD3E761466D10C126432ef7d",
    "transactionIndex": 15,
    "gasUsed": "5184707",
    "logsBloom": "0x
    "blockHash": "0x50a55d31b50782ca30db32b745e3972e053bb0316c3b0b8612ca0149bb91ebb9",
    "transactionHash": "0x62286c744472fadd52c51e6d5d730466f0eefe8a3b239bf4525472397c61b894",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 29619292,
        "transactionHash": "0x62286c744472fadd52c51e6d5d730466f0eefe8a3b239bf4525472397c61b894",
        "address": "0xE7FfE20725328eE1fD3E761466D10C126432ef7d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e5bac846fa14dacf121599f3757ab36a2c8f699d"
        ],
        "data": "0x",
        "logIndex": 73,
        "blockHash": "0x50a55d31b50782ca30db32b745e3972e053bb0316c3b0b8612ca0149bb91ebb9"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 29619292,
        "transactionHash": "0x62286c744472fadd52c51e6d5d730466f0eefe8a3b239bf4525472397c61b894",
        "address": "0xd5f0d82B9113b4128C84bF0aD13f799a03b1e0c1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e7ffe20725328ee1fd3e761466d10c126432ef7d"
        ],
        "data": "0x",
        "logIndex": 74,
        "blockHash": "0x50a55d31b50782ca30db32b745e3972e053bb0316c3b0b8612ca0149bb91ebb9"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 29619292,
        "transactionHash": "0x62286c744472fadd52c51e6d5d730466f0eefe8a3b239bf4525472397c61b894",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e5bac846fa14dacf121599f3757ab36a2c8f699d",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001ba131ffe1937a000000000000000000000000000000000000000000000000025e38aeadcad7430000000000000000000000000000000000000000000000c4096be9dea4cdc8b40000000000000000000000000000000000000000000000000242977cade943c90000000000000000000000000000000000000000000000c409878b10a4af5c2e",
        "logIndex": 75,
        "blockHash": "0x50a55d31b50782ca30db32b745e3972e053bb0316c3b0b8612ca0149bb91ebb9"
      }
    ],
    "blockNumber": 29619292,
    "cumulativeGasUsed": "10667695",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5664BB8f9007a38F74095DB7c1Be6E5e39010649",
    "0x34e6b600b68217da09a281D6eB45fbe1a3261862"
  ],
  "numDeployments": 3,
  "solcInputHash": "fae491fdda32b2eedcf6070716764283",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"widContractAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"sbtContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"}],\"name\":\"ProposalSessionRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voices\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"}],\"name\":\"VotingSessionReinitialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_desc\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"addProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sessionId\",\"type\":\"uint256\"}],\"name\":\"getOneProposalSession\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCountYes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteCountNo\",\"type\":\"uint256\"}],\"internalType\":\"struct Governance.Proposal\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Governance.ProposalVotingSession\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStackingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"votingSessionId\",\"type\":\"uint256\"}],\"name\":\"getVoterStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votingSessionId\",\"type\":\"uint256\"}],\"name\":\"getVotingSessionStatus\",\"outputs\":[{\"internalType\":\"enum Governance.VotingSessionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stackWID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"unstackWID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sessionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_vote\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_votingPower\",\"type\":\"uint256\"}],\"name\":\"voteOnProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract depends on both SWID ERC20 token and WorkID ERC721 SBT token.\",\"kind\":\"dev\",\"methods\":{\"addProposal(string,uint256,uint256)\":{\"details\":\"The proposer define himself the period of the vote\",\"params\":{\"_desc\":\"Proposal description.\",\"_endDate\":\"Voting session end date.\",\"_startDate\":\"Voting session start date.\"}},\"constructor\":{\"details\":\"SBT contract is used to control that the user has a valid employee status, the SWID contract is used to check how many ERC20 tokens he has staked.\",\"params\":{\"sbtContractAddress\":\"The SBT contract address.\",\"widContractAddress\":\"The WID contract address.\"}},\"getOneProposalSession(uint256)\":{\"params\":{\"_sessionId\":\"The voting session id.\"},\"returns\":{\"_0\":\"The proposal voting session details for the given _sessionId\"}},\"getStackingContractAddress()\":{\"returns\":{\"_0\":\"The stacking contract address.\"}},\"getVoterStatus(uint256)\":{\"params\":{\"votingSessionId\":\"The voting session identifier.\"},\"returns\":{\"_0\":\"True if msg.sender has already voted on this session id.\"}},\"getVotingPower()\":{\"details\":\"The voting power is represented by the amount of SWID the user has.\",\"returns\":{\"_0\":\"The number of SWID the caller can use.\"}},\"getVotingSessionStatus(uint256)\":{\"params\":{\"_votingSessionId\":\"The voting session number.\"},\"returns\":{\"_0\":\"The voting session status.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stackWID(uint256,uint256)\":{\"params\":{\"_duration\":\"The stacking duration.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstackWID(uint256)\":{\"params\":{\"_depositId\":\"The deposit id to unstack.\"}},\"voteOnProposal(uint256,bool,uint256)\":{\"details\":\"The vote is only possible if the current block timestamp is between startTime dans endTime of the session. Only valid voters (valid SBT holder with staked SWID tokens) can vote.\",\"params\":{\"_sessionId\":\"The voting session on which the voter want to vote.\",\"_vote\":\"The vote chosen by the voter.\",\"_votingPower\":\"The amount of SWID the voter want to use for this voting session.\"}}},\"title\":\"Governance contract for WorkID.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addProposal(string,uint256,uint256)\":{\"notice\":\"Allows to add a proposal voting session.\"},\"constructor\":{\"notice\":\"Instanciate a Voting contract passing the addresses of both SWID and SBT contracts.\"},\"getOneProposalSession(uint256)\":{\"notice\":\"Gets a proposal session details.\"},\"getStackingContractAddress()\":{\"notice\":\"Returns the stacking contract address.\"},\"getVoterStatus(uint256)\":{\"notice\":\"Returns whether the user has voted on the voting session.\"},\"getVotingPower()\":{\"notice\":\"Returns the voting power of the caller.\"},\"getVotingSessionStatus(uint256)\":{\"notice\":\"Gets the voting session status according to the current timestamp.\"},\"stackWID(uint256,uint256)\":{\"notice\":\"Stacking proxy function to stacking contract with control the user is a valid employee.\"},\"unstackWID(uint256)\":{\"notice\":\"Unstacking proxy function to stacking contract with control the user is a valid employee.\"},\"voteOnProposal(uint256,bool,uint256)\":{\"notice\":\"Allows to vote, either yes or no, on a proposal voting sesion.\"}},\"notice\":\"Use this contract for governance with WorkID SBT and SWID tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance/Governance.sol\":\"Governance\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/governance/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./SWID.sol\\\";\\nimport \\\"../identity/EmployeeCard.sol\\\";\\n\\n/// @title Governance contract for WorkID.\\n/// @notice Use this contract for governance with WorkID SBT and SWID tokens.\\n/// @dev This contract depends on both SWID ERC20 token and WorkID ERC721 SBT token.\\ncontract Governance is Ownable {\\n\\n    /// @notice Proposal structure contained the description and votes received.\\n    struct Proposal {\\n        string description;\\n        uint voteCountYes;\\n        uint voteCountNo;\\n    }\\n    \\n    /// @notice Voter structure that store each voter participation.\\n    struct Voter {\\n        address voter;\\n        uint256 amountSwid;\\n        bool hasVoted;\\n    }\\n\\n    /// @notice Voting session structure to store a voting session details.\\n    struct ProposalVotingSession {\\n        Proposal proposal;\\n        uint256 startTime;\\n        uint256 endTime;\\n    }\\n\\n    /// @notice Enum with the possible status for a voting session.\\n    enum  VotingSessionStatus {\\n        Pending,\\n        InProgress,\\n        Ended\\n    }\\n\\n    ProposalVotingSession[] votingSessions;\\n    mapping (uint256 => mapping(address => Voter)) votingSessionsVoters;\\n\\n    SWID immutable stackingContract;\\n    EmployeeCard immutable employeeCardContract;\\n\\n    event ProposalSessionRegistered(uint sessionId);\\n    event Voted (address voter, uint sessionId, bool vote, uint voices);\\n    event VotingSessionReinitialized (uint256 sessionId);\\n\\n    /// @notice Instanciate a Voting contract passing the addresses of both SWID and SBT contracts.\\n    /// @dev SBT contract is used to control that the user has a valid employee status, the SWID contract is used to check how many ERC20 tokens he has staked.\\n    /// @param widContractAddress The WID contract address.\\n    /// @param sbtContractAddress The SBT contract address.\\n    constructor(address widContractAddress, address payable sbtContractAddress) {\\n        stackingContract = new SWID(widContractAddress);\\n        employeeCardContract = EmployeeCard(sbtContractAddress);\\n    }\\n    \\n    /// @dev Modifier that check the user is an employee.\\n    modifier onlyEmployee() {\\n        uint256 employeeTokenId = employeeCardContract.getEmployeeCardId(msg.sender);\\n        require(employeeCardContract.isTokenValid(employeeTokenId), \\\"Your employee card must still be valid to participate to the governance\\\");\\n        _;\\n    }\\n    /// @dev Modifier that controls the governance eligibility of a user.\\n    modifier onlyVoters() {\\n        require(stackingContract.balanceOf(msg.sender) > 0, \\\"WorkID Governance: You don't have any voting power.\\\");\\n        _;\\n    }\\n\\n    //\\u00a0============== STACKING ==============\\n\\n    /// @notice Returns the stacking contract address.\\n    /// @return The stacking contract address.\\n    function getStackingContractAddress() onlyEmployee external view returns (address){\\n        return address(stackingContract);\\n    }\\n\\n    /// @notice Stacking proxy function to stacking contract with control the user is a valid employee.\\n    /// @param _duration The stacking duration.\\n    function stackWID(uint256 _duration, uint256 _amount) onlyEmployee external {\\n        stackingContract.stackWID(_duration, msg.sender, _amount);\\n    }\\n\\n    /// @notice Unstacking proxy function to stacking contract with control the user is a valid employee.\\n    /// @param _depositId The deposit id to unstack.\\n    function unstackWID(uint256 _depositId) onlyEmployee external {\\n        stackingContract.unstackWID(_depositId, msg.sender);\\n    }\\n\\n    // =============  Voting ====================\\n    \\n    /// @notice Gets a proposal session details.\\n    /// @param _sessionId The voting session id.\\n    /// @return The proposal voting session details for the given _sessionId\\n    function getOneProposalSession(uint256 _sessionId) external onlyEmployee onlyVoters view returns (ProposalVotingSession memory) {\\n        require(_sessionId < votingSessions.length, \\\"Governance: Invalid voting session\\\");\\n        return votingSessions[_sessionId];\\n    }\\n\\n    /// @notice Returns the voting power of the caller.\\n    /// @dev The voting power is represented by the amount of SWID the user has.\\n    /// @return The number of SWID the caller can use.\\n    function getVotingPower() external view onlyEmployee onlyVoters returns (uint256) {\\n        return stackingContract.balanceOf(msg.sender);\\n    }\\n    \\n    /// @notice Allows to add a proposal voting session.\\n    /// @dev The proposer define himself the period of the vote\\n    /// @param _desc Proposal description.\\n    /// @param _startDate Voting session start date.\\n    /// @param _endDate Voting session end date.\\n     function addProposal(string calldata _desc, uint256 _startDate, uint256 _endDate) external onlyEmployee onlyVoters {\\n        require(_startDate > block.timestamp, \\\"Your proposal can't be in the past\\\");\\n        require(_startDate < _endDate, \\\"Your proposal end date can't be before the start date\\\");\\n        require(keccak256(abi.encode(_desc)) != keccak256(abi.encode(\\\"\\\")), \\\"Your proposal can't be empty\\\");\\n\\n        Proposal memory proposal;\\n        proposal.description = _desc;\\n        \\n        ProposalVotingSession memory proposalSession;\\n        proposalSession.proposal = proposal;\\n        proposalSession.startTime = _startDate;\\n        proposalSession.endTime = _endDate;\\n\\n        votingSessions.push(proposalSession);\\n        emit ProposalSessionRegistered(votingSessions.length-1);\\n    }\\n\\n    /// @notice Gets the voting session status according to the current timestamp.\\n    /// @param _votingSessionId The voting session number.\\n    ///\\u00a0@return The voting session status.\\n    function getVotingSessionStatus(uint256 _votingSessionId) external view onlyEmployee onlyVoters returns (VotingSessionStatus) {\\n        require(_votingSessionId < votingSessions.length, \\\"Governance: Voting session doesn't exist\\\");\\n\\n        if (votingSessions[_votingSessionId].startTime > block.timestamp) {\\n            return VotingSessionStatus.Pending;\\n        }\\n        else if (votingSessions[_votingSessionId].endTime < block.timestamp) {\\n            return VotingSessionStatus.Ended;\\n        }\\n\\n        return VotingSessionStatus.InProgress;\\n    }\\n\\n    /// @notice Returns whether the user has voted on the voting session.\\n    /// @param votingSessionId The voting session identifier.\\n    /// @return True if msg.sender has already voted on this session id.\\n    function getVoterStatus(uint256 votingSessionId) external onlyEmployee onlyVoters view returns(bool) {\\n        require(votingSessionId < votingSessions.length, \\\"Governance: Voting session doesn't exist\\\");\\n\\n        return votingSessionsVoters[votingSessionId][msg.sender].hasVoted;\\n    }\\n\\n    /// @notice Allows to vote, either yes or no, on a proposal voting sesion.\\n    /// @dev The vote is only possible if the current block timestamp is between startTime dans endTime of the session.\\n    /// Only valid voters (valid SBT holder with staked SWID tokens) can vote.\\n    ///\\n    /// @param _sessionId The voting session on which the voter want to vote.\\n    /// @param _vote The vote chosen by the voter.\\n    /// @param _votingPower The amount of SWID the voter want to use for this voting session.\\n    function voteOnProposal(uint256 _sessionId, bool _vote, uint256 _votingPower) external onlyEmployee onlyVoters {\\n        require(_sessionId < votingSessions.length, \\\"Governance: Voting session doesn't exist\\\");\\n        require(votingSessions[_sessionId].startTime < block.timestamp, \\\"Governance: Voting session isn't open yet\\\");\\n        require(votingSessionsVoters[_sessionId][msg.sender].hasVoted == false, 'Governance: You have already voted');\\n        require(stackingContract.balanceOf(msg.sender) >= _votingPower, \\\"Governance: You don't have enough SWIDs for the chosen amount of voting power\\\");\\n\\n        _vote ? votingSessions[_sessionId].proposal.voteCountYes+=_votingPower : votingSessions[_sessionId].proposal.voteCountNo+=_votingPower;\\n        votingSessionsVoters[_sessionId][msg.sender] = Voter(msg.sender, _votingPower, true);\\n\\n        emit Voted(msg.sender, _sessionId, _vote, _votingPower);\\n    }\\n}\\n\",\"keccak256\":\"0xe3c102dd81a854af7c168430162ddab4a8c2cf60bfeaf04b7b8d0f813c7cc197\",\"license\":\"MIT\"},\"contracts/governance/SWID.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// Import of ERC20 standard\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n// Import of Ownable.\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./WID.sol\\\";\\n\\nimport \\\"../identity/EmployeeCard.sol\\\";\\n\\n/// @title Stacking ERC20 token used for WorkID.\\n/// @dev This contract can only be used by Governance contract.\\n/// @notice Any WorkID valid SBT holder can stack WID tokens to get governance voting powers.\\ncontract SWID is ERC20, Ownable {\\n\\n    /// @notice Store desposit informations.\\n    /// @dev StackTime and duration will be used for withdraw amount available calculation.\\n    struct WidDeposit {\\n        uint256 duration;\\n        uint256 stackTime;\\n        uint256 amountWID;\\n        uint256 amountSWID;\\n    }\\n\\n    WID private immutable _widContract;\\n    mapping (address => mapping(uint256 => WidDeposit)) private _deposits;\\n    uint256 private _totalDeposits;\\n\\n    event WIDStacked(uint256 depositId, address from, uint256 amountWID, uint256 duration, uint256 stackTime);\\n    event SWIDMinted(address to, uint256 amount);\\n    event DepositUnstacked(address from, uint256 depositId);\\n    event SWIDBurnt(uint256 amount);\\n\\n    /// @notice ERC20 token for WID staking (symbol: sWID)\\n    /// @param _widContractAddress WID contract address.\\n    constructor(\\n        address _widContractAddress\\n    ) ERC20(\\\"Stacked WID\\\", \\\"SWID\\\") {\\n        _widContract = WID(_widContractAddress);\\n    }\\n\\n    /// @notice Receives\\n    /// @dev The amount of sWID minted depends of the staking duration.\\n    /// @param duration Stacking duration in months (must be 6, 12, 36 or 60).\\n    /// @param stacker The stacker address.\\n    /// @param amount Amount of WID to stack.\\n    function stackWID(uint256 duration, address stacker, uint256 amount) public onlyOwner {\\n        require(amount > 0, \\\"SWID: You must send a positive amount of WID\\\");\\n        require(duration == 15768000 || duration == 31536000 || duration == 94608000 || duration == 157680000, \\\"SWID: Duration must be either 6 months, 1 year, 3 years or 5 years\\\");\\n\\n        uint256 amountSWID;\\n        // 6 months\\n        if (duration == 15768000) {\\n            amountSWID = (amount / 100) * 10;\\n        }\\n        // 1 year\\n        else if (duration == 31536000) {\\n            amountSWID = (amount / 100) * 20;\\n        }\\n        // 3 years\\n        else if (duration == 94608000) {\\n            amountSWID = (amount / 100) * 60;\\n        }\\n        // 5 years\\n        else {\\n            amountSWID = amount;\\n        }\\n\\n        // Save the deposit.\\n        uint256 stackTime = block.timestamp;\\n        uint256 depositId = _totalDeposits++;\\n        _deposits[stacker][depositId] = WidDeposit(duration, stackTime, amount, amountSWID);\\n\\n        // Transfers the amount stacked to this contract.\\n        _widContract.transferFrom(stacker, address(this), amount);\\n\\n        // Mints new sWID depending of the amount of WID payed and the duration choosen\\n        _mint(stacker, amountSWID);\\n\\n        emit WIDStacked(depositId, stacker, amount, duration, stackTime);\\n        emit SWIDMinted(stacker, amountSWID);\\n    }\\n\\n    /// @notice Allows to unstack a specific deposit.\\n    /// @dev dApps will get the list of deposits through the WIDStack events.\\n    /// @param depositId The deposit to unstack\\n    /// @param stacker The stacker asking to unstack.\\n    function unstackWID(uint256 depositId, address stacker) public onlyOwner {\\n        require(_deposits[stacker][depositId].duration > 0, \\\"SWID: The specified deposit doesn't exist.\\\");\\n        require(_deposits[stacker][depositId].stackTime + _deposits[stacker][depositId].duration <= block.timestamp, \\\"SWID: You can't unstack before stacking duration is fullfilled.\\\");\\n        \\n        uint256 unstackAmount = _deposits[stacker][depositId].amountWID;\\n        uint256 burnAmount = _deposits[stacker][depositId].amountSWID;\\n        delete _deposits[stacker][depositId];\\n        \\n        // Transfer back the stacked WID.\\n        _widContract.transfer(stacker, unstackAmount);\\n\\n         // Burn the corresponding SWID tokens.\\n        _burn(stacker, burnAmount);\\n\\n        emit DepositUnstacked(stacker, unstackAmount);\\n        emit SWIDBurnt(burnAmount);\\n    }\\n}\",\"keccak256\":\"0x0823d3ce5c2ea02eafe2a45f8c0fb31aff64d3c1b9bdf931d70c880888c4b435\",\"license\":\"MIT\"},\"contracts/governance/WID.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// Import of ERC20 standard\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n// Import of Ownable.\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract WID is ERC20, Ownable {\\n    constructor() ERC20(\\\"WorkID Token\\\", \\\"WID\\\") {}\\n\\n    function mint(address recipient, uint256 amount) external onlyOwner {\\n        _mint(recipient, amount);\\n    }\\n\\n    function burn(address from, uint256 amount) external onlyOwner {\\n        _burn(from, amount);\\n    }\\n}\",\"keccak256\":\"0xba05fb2888257f5352e8755c475e24e613acda83c6f6924a86b883e17180e54d\",\"license\":\"MIT\"},\"contracts/identity/EmployeeCard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// Import of ERC5484 token standard.\\nimport \\\"./token/ERC5484/ERC5484.sol\\\";\\n\\n/// @title An SBT for professionnal decentralized identity and proof of experience.\\n/// @author Bertrand Presles\\n/// @notice You can use this contract to generate digital ids for your employees that can also be used as proof of their work in your company\\ncontract EmployeeCard is ERC5484 {\\n\\n  /// @notice Mapping for token URIs\\n  mapping(uint256 => string) private _tokenURIs;\\n\\n  /// @notice Mapping of token ids with end date.\\n  mapping(uint256 => uint256) private _tokenEndTimes;\\n\\n  // Event when tokens are sent.\\n  event TokenReceived(address sender, uint256 amount);\\n  event CallReceived(address sender, uint256 amount, bytes data);\\n  event EmployeeCardMinted(address employee, uint256 tokenId);\\n  event VacationRightsCalculated(address employee);\\n  event EmployeeCardEnded(uint256 tokenId, uint256 endTime);\\n\\n  constructor(string memory name, string memory symbol) ERC5484(name, symbol) {}\\n\\n  /// @notice Gets the token URI for the passed token id.\\n  /// @dev Returns an URI for a given token ID. Revert if the token ID does not exist. May return an empty string.\\n  /// @param tokenId uint256 ID of the token to query\\n  /// @return The token URI \\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n      require(_exists(tokenId));\\n      return _tokenURIs[tokenId];\\n  }\\n\\n  /// @notice Sets a token URI for a given token id.\\n  /// @dev Internal function to set the token URI for a given token. Reverts if the token ID does not exist\\n  /// @param tokenId uint256 ID of the token to set its URI\\n  /// @param uri string URI to assign\\n  function _setTokenURI(uint256 tokenId, string memory uri) internal {\\n      require(_exists(tokenId));\\n      _tokenURIs[tokenId] = uri;\\n  }\\n\\n  /// @notice Mint a new employee card Consensual SBT token.\\n  /// @param _recipient Recipient address.\\n  /// @param _tokenURI The token URI.\\n  /// emit EmployeeCardMinted event when card is minted.\\n  function mint(address _recipient, string calldata _tokenURI) external onlyOwner {\\n    require(balanceOf(_recipient) == 0, \\\"An employee can only have 1 token\\\");\\n\\n    uint256 tokenId = this.totalSupply() + 1; // Avoid using token id 0.\\n    _safeMint(_recipient, tokenId, BurnAuth.Both);\\n\\n    require(_exists(tokenId), \\\"EmployeeCard: token generation failed\\\");\\n    _setTokenURI(tokenId, _tokenURI);\\n\\n    emit EmployeeCardMinted(_recipient, tokenId);\\n\\n    _approve(owner(), tokenId);\\n  }\\n\\n  /// @notice Gets the employee card id.\\n  /// @param employee Employee address.\\n  /// @return The employee card id.\\n  function getEmployeeCardId(address employee) public view returns (uint256) {\\n    require(0 < this.balanceOf(employee), \\\"EmployeeCard: This address doesn't have any employee card.\\\");\\n\\n    uint256 employeeTokenId = tokenOfOwnerByIndex(employee, 0);\\n    _requireMinted(employeeTokenId);\\n\\n    return employeeTokenId;\\n  }\\n\\n  /// @notice Returns if the SBT is still valid.\\n  /// @dev A valid token is a token without end time set\\n  /// @return True is it's still valid, false otherwise.\\n  function isTokenValid(uint256 tokenId) public view returns (bool) {\\n    _requireMinted(tokenId);\\n\\n    return _tokenEndTimes[tokenId] == 0 || _tokenEndTimes[tokenId] >= block.timestamp;\\n  }\\n\\n  /// @notice Gets an employee card SBT end time.\\n  /// @return End time in unix timestamp format. It returns 0 if the card doesn't have end time yet.\\n  function getEmployeeCardEndTime(uint256 tokenId) external view returns(uint256) {\\n     _requireMinted(tokenId);\\n\\n     return _tokenEndTimes[tokenId];\\n  }\\n\\n  /// @notice Invalidates an SBT token.\\n  /// @dev Saves the end date (in unix timestamp format) in _tokenEndTimes mapping.\\n  /// @param tokenId The token id to invalidate.\\n  function invalidateEmployeeCard(uint256 tokenId, uint256 endTime) external onlyOwner {\\n     _requireMinted(tokenId);\\n    require(endTime >= block.timestamp, \\\"EmployeeCard: you must specify a end time in the future\\\");\\n    _tokenEndTimes[tokenId] = endTime;\\n\\n    emit EmployeeCardEnded(tokenId, endTime);\\n  }\\n\\n  /// @notice Burns a card.\\n  /// @param employee Current holder of the card.\\n  function burnCard(address employee) external onlyOwner {\\n    uint256 employeeTokenId = getEmployeeCardId(employee);\\n\\n    _burn(employeeTokenId);\\n\\n    // Clear metadata (if any)\\n    if (bytes(_tokenURIs[employeeTokenId]).length != 0) {\\n        delete _tokenURIs[employeeTokenId];\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xc199275315a7736338ca8a300b949f0d29092fe9095dbd714f56ff091c1f15ee\",\"license\":\"MIT\"},\"contracts/identity/token/ERC5484/ERC5484.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// Import of ERC721Enumerable extension\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\n// Import of Ownable.\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./IERC5484.sol\\\";\\n\\n/// @title You can extends this contract to implement Consensual SBTs.\\n/// @author Bertrand Presles.\\n/// @notice An implementation of Consensual Soulbound Token.\\n/// @dev Implements EIP-5484: Consensual Soulbound Tokens - https://eips.ethereum.org/EIPS/eip-5484\\nabstract contract ERC5484 is IERC5484, ERC721Enumerable, Ownable {\\n\\n    /// @notice Mapping to store burn authorizations for each token issued.\\n    mapping (uint256 => BurnAuth) burnAuths;\\n\\n    /// @notice Constructor of ERC5484.\\n    constructor (string memory name, string memory symbol) ERC721(name, symbol) {}\\n\\n    /// @notice Safely mint the SBT.\\n    /// @dev Same as {xref-ERC5484-_safeMint-address-uint256-BurnAuth-}[`_safeMint`], with an additional `data` parameter which is forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        BurnAuth tokenBurnAuth,\\n        bytes memory data\\n    ) internal virtual {\\n        burnAuths[tokenId] = tokenBurnAuth;\\n        ERC721._safeMint(to, tokenId, data);\\n\\n        emit Issued(_msgSender(), to, tokenId, tokenBurnAuth);\\n    }\\n\\n    /// @notice Safely mints `tokenId` and transfers it to `to` with `tokenBurnAuth` burn policy.\\n    /// @dev Prefer use this function than the _mint() one.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - `tokenId` must not exist.\\n    /// - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    /// \\n    /// Emits a {Transfer} event.\\n    /// Emits a {Issued} event.\\n    ///\\n    /// @param to The recipient address.\\n    /// @param tokenId The token id to mint.\\n    /// @param tokenBurnAuth The burn policy to apply for this token.\\n    function _safeMint(address to, uint256 tokenId, BurnAuth tokenBurnAuth) internal virtual {\\n        _safeMint(to, tokenId, tokenBurnAuth, \\\"\\\");\\n    }\\n\\n    /// @notice Forbid transfer for SBTs.\\n    /// @dev Transfer is forbidden for ERC 5484 tokens. Reverts systematically.\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override virtual {\\n        revert(\\\"ERC 5484: Transfer is not allowed\\\");\\n    }\\n    \\n    /// @notice Ensure that burn is only allowed if it complies with the burn policy of the token.\\n    /// @dev Requirements:\\n    /// \\n    /// - `msg.sender` should be the one defined by the burn auth rule.\\n    /// - `tokenId` must exists\\n    /// \\n    /// @param tokenId The token id to burn.\\n    function _burn(uint256 tokenId) internal virtual override {\\n        // Implements check on burn auths for burn allowance.\\n        if (burnAuths[tokenId] == BurnAuth.Neither) {\\n            revert(\\\"ERC 5484: Burn is not allowed\\\");\\n        }\\n        else if (burnAuths[tokenId] == BurnAuth.IssuerOnly) {\\n            require(owner() ==  _msgSender(), \\\"ERC 5484: Only the issuer of the token is allowed to burn.\\\");\\n        }\\n        else if (burnAuths[tokenId] == BurnAuth.OwnerOnly) {\\n            require(_ownerOf(tokenId) ==  _msgSender(), \\\"ERC 5484: Only the owner of the token is allowed to burn.\\\");\\n        }\\n        else if (burnAuths[tokenId] == BurnAuth.Both) {\\n            require(_ownerOf(tokenId) ==  _msgSender() || owner() ==  _msgSender(), \\\"ERC 5484: Only the owner or the issuer of the token are allowed to burn.\\\");\\n        }\\n\\n        ERC721._burn(tokenId);\\n    }\\n\\n    /// @notice Gets the burn authorization information for this token.\\n    /// @param tokenId The token Id.\\n    /// @return BurnAuth The burn policy for the token.\\n    function burnAuth(\\n        uint256 tokenId\\n    ) external view returns (BurnAuth) {\\n        require(_exists(tokenId), \\\"EmployeeCard: token does not exist\\\");\\n\\n        return burnAuths[tokenId];\\n    }\\n}\",\"keccak256\":\"0xcc2727f65220ac3ae6661ef6f161c9679dc71debfa43fe785a863a2ae5854035\",\"license\":\"CC0-1.0\"},\"contracts/identity/token/ERC5484/IERC5484.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for EIP-5484 implementations.\\n */\\ninterface IERC5484 {\\n    /// A guideline to standardlize burn-authorization's number coding\\n    enum BurnAuth {\\n        IssuerOnly,\\n        OwnerOnly,\\n        Both,\\n        Neither\\n    }\\n\\n    /// @notice Emitted when a soulbound token is issued.\\n    /// @dev This emit is an add-on to nft's transfer emit in order to distinguish sbt \\n    /// from vanilla nft while providing backward compatibility.\\n    /// @param from The issuer\\n    /// @param to The receiver\\n    /// @param tokenId The id of the issued token\\n    event Issued (\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId,\\n        BurnAuth burnAuth\\n    );\\n\\n    /// @notice provides burn authorization of the token id.\\n    /// @dev unassigned tokenIds are invalid, and queries do throw\\n    /// @param tokenId The identifier for a token.\\n    function burnAuth(uint256 tokenId) external view returns (BurnAuth);\\n}\",\"keccak256\":\"0xbacc91f96e56926e3e94f2b0d0f3988efa86c72439221f53b15fe602c159cc71\",\"license\":\"CC0-1.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063715018a611610071578063715018a61461018b57806380670d8f146101955780638da5cb5b146101b1578063a6382e35146101cf578063ad42b1ea146101ed578063f2fde38b1461021d576100b4565b8063087f0270146100b957806313a3deac146100d75780631521c7ec146101075780633106fea014610123578063316738ec1461013f5780635c08a75f1461015b575b600080fd5b6100c1610239565b6040516100ce91906121f2565b60405180910390f35b6100f160048036038101906100ec9190612243565b61052d565b6040516100fe919061228b565b60405180910390f35b610121600480360381019061011c91906122a6565b610831565b005b61013d60048036038101906101389190612312565b610a3c565b005b610159600480360381019061015491906123ca565b611083565b005b61017560048036038101906101709190612243565b611529565b604051610182919061257d565b60405180910390f35b6101936118ce565b005b6101af60048036038101906101aa9190612243565b6118e2565b005b6101b9611aea565b6040516101c691906125e0565b60405180910390f35b6101d7611b13565b6040516101e491906125e0565b60405180910390f35b61020760048036038101906102029190612243565b611cb2565b6040516102149190612672565b60405180910390f35b610237600480360381019061023291906126b9565b611fc4565b005b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b97d9155336040518263ffffffff1660e01b815260040161029591906125e0565b602060405180830381865afa1580156102b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d691906126fb565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c92243d8826040518263ffffffff1660e01b815260040161033191906121f2565b602060405180830381865afa15801561034e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610372919061273d565b6103b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a890612813565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161040c91906125e0565b602060405180830381865afa158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044d91906126fb565b1161048d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610484906128a5565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016104e691906125e0565b602060405180830381865afa158015610503573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052791906126fb565b91505090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b97d9155336040518263ffffffff1660e01b815260040161058991906125e0565b602060405180830381865afa1580156105a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ca91906126fb565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c92243d8826040518263ffffffff1660e01b815260040161062591906121f2565b602060405180830381865afa158015610642573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610666919061273d565b6106a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069c90612813565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161070091906125e0565b602060405180830381865afa15801561071d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074191906126fb565b11610781576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610778906128a5565b60405180910390fd5b60018054905083106107c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bf90612937565b60405180910390fd5b6002600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b97d9155336040518263ffffffff1660e01b815260040161088c91906125e0565b602060405180830381865afa1580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd91906126fb565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c92243d8826040518263ffffffff1660e01b815260040161092891906121f2565b602060405180830381865afa158015610945573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610969919061273d565b6109a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099f90612813565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631e5d930f8433856040518463ffffffff1660e01b8152600401610a0593929190612957565b600060405180830381600087803b158015610a1f57600080fd5b505af1158015610a33573d6000803e3d6000fd5b50505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b97d9155336040518263ffffffff1660e01b8152600401610a9791906125e0565b602060405180830381865afa158015610ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad891906126fb565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c92243d8826040518263ffffffff1660e01b8152600401610b3391906121f2565b602060405180830381865afa158015610b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b74919061273d565b610bb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610baa90612813565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610c0e91906125e0565b602060405180830381865afa158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f91906126fb565b11610c8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c86906128a5565b60405180910390fd5b6001805490508410610cd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccd90612937565b60405180910390fd5b4260018581548110610ceb57610cea61298e565b5b90600052602060002090600502016003015410610d3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3490612a2f565b60405180910390fd5b600015156002600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514610de4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddb90612ac1565b60405180910390fd5b817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610e3e91906125e0565b602060405180830381865afa158015610e5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7f91906126fb565b1015610ec0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb790612b79565b60405180910390fd5b82610f08578160018581548110610eda57610ed961298e565b5b90600052602060002090600502016000016002016000828254610efd9190612bc8565b925050819055610f47565b8160018581548110610f1d57610f1c61298e565b5b90600052602060002090600502016000016001016000828254610f409190612bc8565b9250508190555b5060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001838152602001600115158152506002600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050507f9fea94799b68dbb994c4e44547ea7b5c9e4068fbc385b8b688005a16b60c3cc6338585856040516110759493929190612bfc565b60405180910390a150505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b97d9155336040518263ffffffff1660e01b81526004016110de91906125e0565b602060405180830381865afa1580156110fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111f91906126fb565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c92243d8826040518263ffffffff1660e01b815260040161117a91906121f2565b602060405180830381865afa158015611197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bb919061273d565b6111fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f190612813565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161125591906125e0565b602060405180830381865afa158015611272573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129691906126fb565b116112d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cd906128a5565b60405180910390fd5b428311611318576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130f90612cb3565b60405180910390fd5b81831061135a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135190612d45565b60405180910390fd5b60405160200161136990612d8b565b604051602081830303815290604052805190602001208585604051602001611392929190612de7565b60405160208183030381529060405280519060200120036113e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113df90612e57565b60405180910390fd5b6113f0612191565b85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081600001819052506114456121b2565b8181600001819052508481602001818152505083816040018181525050600181908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160008201518160000190816114ac91906130b2565b5060208201518160010155604082015181600201555050602082015181600301556040820151816004015550507f286eacf5b6704a302e166bc24702bf2880710cb8684f1584f160dbb817b7a4206001808054905061150b9190613184565b60405161151891906121f2565b60405180910390a150505050505050565b6115316121b2565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b97d9155336040518263ffffffff1660e01b815260040161158c91906125e0565b602060405180830381865afa1580156115a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cd91906126fb565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c92243d8826040518263ffffffff1660e01b815260040161162891906121f2565b602060405180830381865afa158015611645573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611669919061273d565b6116a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169f90612813565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161170391906125e0565b602060405180830381865afa158015611720573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174491906126fb565b11611784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177b906128a5565b60405180910390fd5b60018054905083106117cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c29061322a565b60405180910390fd5b600183815481106117df576117de61298e565b5b90600052602060002090600502016040518060600160405290816000820160405180606001604052908160008201805461181890612ed5565b80601f016020809104026020016040519081016040528092919081815260200182805461184490612ed5565b80156118915780601f1061186657610100808354040283529160200191611891565b820191906000526020600020905b81548152906001019060200180831161187457829003601f168201915b5050505050815260200160018201548152602001600282015481525050815260200160038201548152602001600482015481525050915050919050565b6118d6612047565b6118e060006120c5565b565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b97d9155336040518263ffffffff1660e01b815260040161193d91906125e0565b602060405180830381865afa15801561195a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197e91906126fb565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c92243d8826040518263ffffffff1660e01b81526004016119d991906121f2565b602060405180830381865afa1580156119f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1a919061273d565b611a59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5090612813565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b6e969be83336040518363ffffffff1660e01b8152600401611ab492919061324a565b600060405180830381600087803b158015611ace57600080fd5b505af1158015611ae2573d6000803e3d6000fd5b505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b97d9155336040518263ffffffff1660e01b8152600401611b6f91906125e0565b602060405180830381865afa158015611b8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb091906126fb565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c92243d8826040518263ffffffff1660e01b8152600401611c0b91906121f2565b602060405180830381865afa158015611c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4c919061273d565b611c8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8290612813565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000091505090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b97d9155336040518263ffffffff1660e01b8152600401611d0e91906125e0565b602060405180830381865afa158015611d2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4f91906126fb565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c92243d8826040518263ffffffff1660e01b8152600401611daa91906121f2565b602060405180830381865afa158015611dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611deb919061273d565b611e2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2190612813565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611e8591906125e0565b602060405180830381865afa158015611ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec691906126fb565b11611f06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611efd906128a5565b60405180910390fd5b6001805490508310611f4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4490612937565b60405180910390fd5b4260018481548110611f6257611f6161298e565b5b9060005260206000209060050201600301541115611f835760009150611fbe565b4260018481548110611f9857611f9761298e565b5b9060005260206000209060050201600401541015611fb95760029150611fbe565b600191505b50919050565b611fcc612047565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361203b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612032906132e5565b60405180910390fd5b612044816120c5565b50565b61204f612189565b73ffffffffffffffffffffffffffffffffffffffff1661206d611aea565b73ffffffffffffffffffffffffffffffffffffffff16146120c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ba90613351565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60405180606001604052806060815260200160008152602001600081525090565b60405180606001604052806121c5612191565b815260200160008152602001600081525090565b6000819050919050565b6121ec816121d9565b82525050565b600060208201905061220760008301846121e3565b92915050565b600080fd5b600080fd5b612220816121d9565b811461222b57600080fd5b50565b60008135905061223d81612217565b92915050565b6000602082840312156122595761225861220d565b5b60006122678482850161222e565b91505092915050565b60008115159050919050565b61228581612270565b82525050565b60006020820190506122a0600083018461227c565b92915050565b600080604083850312156122bd576122bc61220d565b5b60006122cb8582860161222e565b92505060206122dc8582860161222e565b9150509250929050565b6122ef81612270565b81146122fa57600080fd5b50565b60008135905061230c816122e6565b92915050565b60008060006060848603121561232b5761232a61220d565b5b60006123398682870161222e565b935050602061234a868287016122fd565b925050604061235b8682870161222e565b9150509250925092565b600080fd5b600080fd5b600080fd5b60008083601f84011261238a57612389612365565b5b8235905067ffffffffffffffff8111156123a7576123a661236a565b5b6020830191508360018202830111156123c3576123c261236f565b5b9250929050565b600080600080606085870312156123e4576123e361220d565b5b600085013567ffffffffffffffff81111561240257612401612212565b5b61240e87828801612374565b945094505060206124218782880161222e565b92505060406124328782880161222e565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b8381101561247857808201518184015260208101905061245d565b60008484015250505050565b6000601f19601f8301169050919050565b60006124a08261243e565b6124aa8185612449565b93506124ba81856020860161245a565b6124c381612484565b840191505092915050565b6124d7816121d9565b82525050565b600060608301600083015184820360008601526124fa8282612495565b915050602083015161250f60208601826124ce565b50604083015161252260408601826124ce565b508091505092915050565b6000606083016000830151848203600086015261254a82826124dd565b915050602083015161255f60208601826124ce565b50604083015161257260408601826124ce565b508091505092915050565b60006020820190508181036000830152612597818461252d565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125ca8261259f565b9050919050565b6125da816125bf565b82525050565b60006020820190506125f560008301846125d1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061263b5761263a6125fb565b5b50565b600081905061264c8261262a565b919050565b600061265c8261263e565b9050919050565b61266c81612651565b82525050565b60006020820190506126876000830184612663565b92915050565b612696816125bf565b81146126a157600080fd5b50565b6000813590506126b38161268d565b92915050565b6000602082840312156126cf576126ce61220d565b5b60006126dd848285016126a4565b91505092915050565b6000815190506126f581612217565b92915050565b6000602082840312156127115761271061220d565b5b600061271f848285016126e6565b91505092915050565b600081519050612737816122e6565b92915050565b6000602082840312156127535761275261220d565b5b600061276184828501612728565b91505092915050565b600082825260208201905092915050565b7f596f757220656d706c6f7965652063617264206d757374207374696c6c20626560008201527f2076616c696420746f20706172746963697061746520746f2074686520676f7660208201527f65726e616e636500000000000000000000000000000000000000000000000000604082015250565b60006127fd60478361276a565b91506128088261277b565b606082019050919050565b6000602082019050818103600083015261282c816127f0565b9050919050565b7f576f726b494420476f7665726e616e63653a20596f7520646f6e27742068617660008201527f6520616e7920766f74696e6720706f7765722e00000000000000000000000000602082015250565b600061288f60338361276a565b915061289a82612833565b604082019050919050565b600060208201905081810360008301526128be81612882565b9050919050565b7f476f7665726e616e63653a20566f74696e672073657373696f6e20646f65736e60008201527f2774206578697374000000000000000000000000000000000000000000000000602082015250565b600061292160288361276a565b915061292c826128c5565b604082019050919050565b6000602082019050818103600083015261295081612914565b9050919050565b600060608201905061296c60008301866121e3565b61297960208301856125d1565b61298660408301846121e3565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f476f7665726e616e63653a20566f74696e672073657373696f6e2069736e277460008201527f206f70656e207965740000000000000000000000000000000000000000000000602082015250565b6000612a1960298361276a565b9150612a24826129bd565b604082019050919050565b60006020820190508181036000830152612a4881612a0c565b9050919050565b7f476f7665726e616e63653a20596f75206861766520616c726561647920766f7460008201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b6000612aab60228361276a565b9150612ab682612a4f565b604082019050919050565b60006020820190508181036000830152612ada81612a9e565b9050919050565b7f476f7665726e616e63653a20596f7520646f6e2774206861766520656e6f756760008201527f6820535749447320666f72207468652063686f73656e20616d6f756e74206f6660208201527f20766f74696e6720706f77657200000000000000000000000000000000000000604082015250565b6000612b63604d8361276a565b9150612b6e82612ae1565b606082019050919050565b60006020820190508181036000830152612b9281612b56565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612bd3826121d9565b9150612bde836121d9565b9250828201905080821115612bf657612bf5612b99565b5b92915050565b6000608082019050612c1160008301876125d1565b612c1e60208301866121e3565b612c2b604083018561227c565b612c3860608301846121e3565b95945050505050565b7f596f75722070726f706f73616c2063616e277420626520696e2074686520706160008201527f7374000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c9d60228361276a565b9150612ca882612c41565b604082019050919050565b60006020820190508181036000830152612ccc81612c90565b9050919050565b7f596f75722070726f706f73616c20656e6420646174652063616e27742062652060008201527f6265666f72652074686520737461727420646174650000000000000000000000602082015250565b6000612d2f60358361276a565b9150612d3a82612cd3565b604082019050919050565b60006020820190508181036000830152612d5e81612d22565b9050919050565b50565b6000612d7560008361276a565b9150612d8082612d65565b600082019050919050565b60006020820190508181036000830152612da481612d68565b9050919050565b82818337600083830152505050565b6000612dc6838561276a565b9350612dd3838584612dab565b612ddc83612484565b840190509392505050565b60006020820190508181036000830152612e02818486612dba565b90509392505050565b7f596f75722070726f706f73616c2063616e277420626520656d70747900000000600082015250565b6000612e41601c8361276a565b9150612e4c82612e0b565b602082019050919050565b60006020820190508181036000830152612e7081612e34565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612eed57607f821691505b602082108103612f0057612eff612ea6565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612f687fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612f2b565b612f728683612f2b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612faf612faa612fa5846121d9565b612f8a565b6121d9565b9050919050565b6000819050919050565b612fc983612f94565b612fdd612fd582612fb6565b848454612f38565b825550505050565b600090565b612ff2612fe5565b612ffd818484612fc0565b505050565b5b8181101561302157613016600082612fea565b600181019050613003565b5050565b601f8211156130665761303781612f06565b61304084612f1b565b8101602085101561304f578190505b61306361305b85612f1b565b830182613002565b50505b505050565b600082821c905092915050565b60006130896000198460080261306b565b1980831691505092915050565b60006130a28383613078565b9150826002028217905092915050565b6130bb8261243e565b67ffffffffffffffff8111156130d4576130d3612e77565b5b6130de8254612ed5565b6130e9828285613025565b600060209050601f83116001811461311c576000841561310a578287015190505b6131148582613096565b86555061317c565b601f19841661312a86612f06565b60005b828110156131525784890151825560018201915060208501945060208101905061312d565b8683101561316f578489015161316b601f891682613078565b8355505b6001600288020188555050505b505050505050565b600061318f826121d9565b915061319a836121d9565b92508282039050818111156131b2576131b1612b99565b5b92915050565b7f476f7665726e616e63653a20496e76616c696420766f74696e6720736573736960008201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b600061321460228361276a565b915061321f826131b8565b604082019050919050565b6000602082019050818103600083015261324381613207565b9050919050565b600060408201905061325f60008301856121e3565b61326c60208301846125d1565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006132cf60268361276a565b91506132da82613273565b604082019050919050565b600060208201905081810360008301526132fe816132c2565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061333b60208361276a565b915061334682613305565b602082019050919050565b6000602082019050818103600083015261336a8161332e565b905091905056fea2646970667358221220c80aee5a16fd2a957c6747492ea6a28a39eb1606b9de1e8e08cd9ed1ebccbe7664736f6c63430008110033",
  "devdoc": {
    "details": "This contract depends on both SWID ERC20 token and WorkID ERC721 SBT token.",
    "kind": "dev",
    "methods": {
      "addProposal(string,uint256,uint256)": {
        "details": "The proposer define himself the period of the vote",
        "params": {
          "_desc": "Proposal description.",
          "_endDate": "Voting session end date.",
          "_startDate": "Voting session start date."
        }
      },
      "constructor": {
        "details": "SBT contract is used to control that the user has a valid employee status, the SWID contract is used to check how many ERC20 tokens he has staked.",
        "params": {
          "sbtContractAddress": "The SBT contract address.",
          "widContractAddress": "The WID contract address."
        }
      },
      "getOneProposalSession(uint256)": {
        "params": {
          "_sessionId": "The voting session id."
        },
        "returns": {
          "_0": "The proposal voting session details for the given _sessionId"
        }
      },
      "getStackingContractAddress()": {
        "returns": {
          "_0": "The stacking contract address."
        }
      },
      "getVoterStatus(uint256)": {
        "params": {
          "votingSessionId": "The voting session identifier."
        },
        "returns": {
          "_0": "True if msg.sender has already voted on this session id."
        }
      },
      "getVotingPower()": {
        "details": "The voting power is represented by the amount of SWID the user has.",
        "returns": {
          "_0": "The number of SWID the caller can use."
        }
      },
      "getVotingSessionStatus(uint256)": {
        "params": {
          "_votingSessionId": "The voting session number."
        },
        "returns": {
          "_0": "The voting session status."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stackWID(uint256,uint256)": {
        "params": {
          "_duration": "The stacking duration."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstackWID(uint256)": {
        "params": {
          "_depositId": "The deposit id to unstack."
        }
      },
      "voteOnProposal(uint256,bool,uint256)": {
        "details": "The vote is only possible if the current block timestamp is between startTime dans endTime of the session. Only valid voters (valid SBT holder with staked SWID tokens) can vote.",
        "params": {
          "_sessionId": "The voting session on which the voter want to vote.",
          "_vote": "The vote chosen by the voter.",
          "_votingPower": "The amount of SWID the voter want to use for this voting session."
        }
      }
    },
    "title": "Governance contract for WorkID.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addProposal(string,uint256,uint256)": {
        "notice": "Allows to add a proposal voting session."
      },
      "constructor": {
        "notice": "Instanciate a Voting contract passing the addresses of both SWID and SBT contracts."
      },
      "getOneProposalSession(uint256)": {
        "notice": "Gets a proposal session details."
      },
      "getStackingContractAddress()": {
        "notice": "Returns the stacking contract address."
      },
      "getVoterStatus(uint256)": {
        "notice": "Returns whether the user has voted on the voting session."
      },
      "getVotingPower()": {
        "notice": "Returns the voting power of the caller."
      },
      "getVotingSessionStatus(uint256)": {
        "notice": "Gets the voting session status according to the current timestamp."
      },
      "stackWID(uint256,uint256)": {
        "notice": "Stacking proxy function to stacking contract with control the user is a valid employee."
      },
      "unstackWID(uint256)": {
        "notice": "Unstacking proxy function to stacking contract with control the user is a valid employee."
      },
      "voteOnProposal(uint256,bool,uint256)": {
        "notice": "Allows to vote, either yes or no, on a proposal voting sesion."
      }
    },
    "notice": "Use this contract for governance with WorkID SBT and SWID tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/governance/Governance.sol:Governance",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3759,
        "contract": "contracts/governance/Governance.sol:Governance",
        "label": "votingSessions",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(ProposalVotingSession)3751_storage)dyn_storage"
      },
      {
        "astId": 3766,
        "contract": "contracts/governance/Governance.sol:Governance",
        "label": "votingSessionsVoters",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Voter)3743_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(ProposalVotingSession)3751_storage)dyn_storage": {
        "base": "t_struct(ProposalVotingSession)3751_storage",
        "encoding": "dynamic_array",
        "label": "struct Governance.ProposalVotingSession[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Voter)3743_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Governance.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)3743_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Voter)3743_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct Governance.Voter))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Voter)3743_storage)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)3736_storage": {
        "encoding": "inplace",
        "label": "struct Governance.Proposal",
        "members": [
          {
            "astId": 3731,
            "contract": "contracts/governance/Governance.sol:Governance",
            "label": "description",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3733,
            "contract": "contracts/governance/Governance.sol:Governance",
            "label": "voteCountYes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3735,
            "contract": "contracts/governance/Governance.sol:Governance",
            "label": "voteCountNo",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ProposalVotingSession)3751_storage": {
        "encoding": "inplace",
        "label": "struct Governance.ProposalVotingSession",
        "members": [
          {
            "astId": 3746,
            "contract": "contracts/governance/Governance.sol:Governance",
            "label": "proposal",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Proposal)3736_storage"
          },
          {
            "astId": 3748,
            "contract": "contracts/governance/Governance.sol:Governance",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3750,
            "contract": "contracts/governance/Governance.sol:Governance",
            "label": "endTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Voter)3743_storage": {
        "encoding": "inplace",
        "label": "struct Governance.Voter",
        "members": [
          {
            "astId": 3738,
            "contract": "contracts/governance/Governance.sol:Governance",
            "label": "voter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3740,
            "contract": "contracts/governance/Governance.sol:Governance",
            "label": "amountSwid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3742,
            "contract": "contracts/governance/Governance.sol:Governance",
            "label": "hasVoted",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}